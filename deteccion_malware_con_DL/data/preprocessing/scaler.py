import numpy as np
import torch
from sklearn.preprocessing import StandardScaler

class Scaler:
    def __init__(self):
        self.scaler = StandardScaler()
        self.fitted = False

    def fit(self, X):
        # Ajusta el scaler sobre un batch de datos (numpy array)
        self.scaler.fit(X)
        self.fitted = True

    def __call__(self, sample):
        # sample puede ser un tensor o un array, lo convertimos a numpy
        if isinstance(sample, torch.Tensor):
            sample_np = sample.cpu().numpy()
        else:
            sample_np = np.array(sample)
        # Si no est√° ajustado, lanzamos error (debe ajustarse en el pipeline)
        if not self.fitted:
            raise RuntimeError("Scaler debe ser ajustado con fit() antes de usarse para transformar.")
        # Si es un solo vector, reshape para que sea 2D
        if sample_np.ndim == 1:
            sample_np = sample_np.reshape(1, -1)
        sample_scaled = self.scaler.transform(sample_np)
        # Si la entrada era 1D, devolvemos 1D
        if sample_scaled.shape[0] == 1:
            sample_scaled = sample_scaled.flatten()
        # Devolvemos como tensor si la entrada era tensor
        if isinstance(sample, torch.Tensor):
            return torch.from_numpy(sample_scaled).type_as(sample)
        else:
            return sample_scaled

def build_transform(config):
    return Scaler()
